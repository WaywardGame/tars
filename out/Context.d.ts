import Player from "game/entity/player/Player";
import { ItemType } from "game/item/IItem";
import Item from "game/item/Item";
import { IVector3 } from "utilities/math/IVector";
import ContextState from "./ContextState";
import { IBase, IContext, IInventoryItems, ITarsOptions } from "./ITars";
export default class Context implements IContext {
    readonly player: Player;
    readonly base: IBase;
    readonly inventory: IInventoryItems;
    readonly options: Readonly<ITarsOptions>;
    state: ContextState;
    readonly calculatingDifficulty: boolean;
    private initialState?;
    private changes;
    constructor(player: Player, base: IBase, inventory: IInventoryItems, options: Readonly<ITarsOptions>, state?: ContextState, calculatingDifficulty?: boolean, initialState?: ContextState | undefined);
    get island(): import("@wayward/types/definitions/game/game/island/Island").default;
    toString(): string;
    clone(calculatingDifficulty?: boolean, increaseDepth?: boolean): Context;
    merge(state: ContextState): void;
    watchForChanges(): ContextState;
    unwatch(): void;
    isReservedItem(item: Item): boolean;
    isSoftReservedItem(item: Item): boolean;
    isHardReservedItem(item: Item): boolean;
    isReservedItemType(itemType: ItemType): boolean;
    getData<T = any>(type: string): T | undefined;
    getDataOrDefault<T = any>(type: string, defaultValue: T): T;
    setData<T = any>(type: string, value: T | undefined): void;
    addSoftReservedItems(...items: Item[]): void;
    addHardReservedItems(...items: Item[]): void;
    addProvidedItems(itemTypes: ItemType[]): void;
    tryUseProvidedItems(itemType: ItemType): boolean;
    setInitialState(state?: ContextState): void;
    reset(): void;
    getHashCode(): string;
    markShouldIncludeHashCode(): void;
    isPlausible(difficulty: number, requireMinimumAcceptedDifficulty?: boolean): boolean;
    getPosition(): IVector3;
}
