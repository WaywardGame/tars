import { QuadrantComponentId } from "ui/screen/screens/game/IGameScreenApi";
import CommandManager from "command/CommandManager";
import { IEventEmitter } from "event/EventEmitter";
import { ActionType, IActionApi } from "game/entity/action/IAction";
import { IStat } from "game/entity/IStats";
import { Source } from "game/entity/player/IMessageManager";
import { PlayerState } from "game/entity/player/IPlayer";
import { INote } from "game/entity/player/note/NoteManager";
import Player from "game/entity/player/Player";
import { TileUpdateType } from "game/IGame";
import Island from "game/island/Island";
import { IPromptDescriptionBase } from "game/meta/prompt/IPrompt";
import Prompts, { IPrompt } from "game/meta/prompt/Prompts";
import { ITile } from "game/tile/ITerrain";
import Dictionary from "language/Dictionary";
import InterruptChoice from "language/dictionary/InterruptChoice";
import Message from "language/dictionary/Message";
import Translation from "language/Translation";
import Mod from "mod/Mod";
import Bindable from "ui/input/Bindable";
import { DialogId } from "ui/screen/screens/game/Dialogs";
import { MenuBarButtonType } from "ui/screen/screens/game/static/menubar/IMenuBarButton";
import { IVector2 } from "utilities/math/IVector";
import { IContext } from "./core/context/IContext";
import { ITarsMode } from "./core/mode/IMode";
import { ITarsOptions } from "./core/ITars";
import { ITarsEvents, ISaveData, TarsTranslation } from "./ITarsMod";
export default class TarsMod extends Mod {
    static readonly INSTANCE: TarsMod;
    event: IEventEmitter<this, ITarsEvents>;
    saveData: ISaveData;
    readonly bindableToggleDialog: Bindable;
    readonly bindableToggleTars: Bindable;
    readonly messageSource: Source;
    readonly messageToggle: Message;
    readonly messageTaskComplete: Message;
    readonly messageTaskUnableToComplete: Message;
    readonly messageNavigationUpdating: Message;
    readonly messageNavigationUpdated: Message;
    readonly messageQuantumBurstStart: Message;
    readonly messageQuantumBurstCooldownStart: Message;
    readonly messageQuantumBurstCooldownEnd: Message;
    readonly dictionary: Dictionary;
    readonly dialogMain: DialogId;
    readonly menuBarButton: MenuBarButtonType;
    readonly quadrantComponent: QuadrantComponentId;
    private base;
    private inventory;
    private readonly statThresholdExceeded;
    private gamePlaying;
    private quantumBurstCooldown;
    private weightStatus;
    private previousWeightStatus;
    private lastStatusMessage;
    private context;
    private objectivePipeline;
    private interruptObjectivePipeline;
    private interruptContext;
    private readonly interruptContexts;
    private interruptIds;
    private tickTimeoutId;
    private navigation;
    private navigationSystemState;
    private navigationUpdatePromise;
    private navigationQueuedUpdates;
    private readonly modeCache;
    onInitialize(): void;
    onUninitialize(): void;
    onLoad(): void;
    onUnload(): void;
    onGameStart(): void;
    onGameEnd(state?: PlayerState): void;
    onPlayerSpawn(player: Player): void;
    onWriteNote(player: Player, note: INote): false | void;
    onPlayerDeath(): void;
    onPlayerRespawn(): void;
    processMovement(player: Player): Promise<void>;
    restEnd(): void;
    onMoveComplete(player: Player): void;
    onPrompt(host: Prompts.Events, prompt: IPrompt<IPromptDescriptionBase<any[]>>): string | boolean | void | InterruptChoice | undefined;
    command(_: CommandManager, _player: Player, _args: string): void;
    onToggleTars(): boolean;
    onTileUpdate(island: Island, tile: ITile, tileX: number, tileY: number, tileZ: number, tileUpdateType: TileUpdateType): void;
    postExecuteAction(_: any, actionType: ActionType, api: IActionApi, args: any[]): void;
    processInput(player: Player): boolean | undefined;
    onWalkPathChange(player: Player, walkPath: IVector2[] | undefined): void;
    preMove(player: Player, prevX: number, prevY: number, prevZ: number, prevTile: ITile, nextX: number, nextY: number, nextZ: number, nextTile: ITile): void;
    onStatChange(player: Player, stat: IStat): void;
    onMoveToIsland(): Promise<void>;
    getContext(): IContext;
    getTranslation(translation: TarsTranslation | string | Translation): Translation;
    isEnabled(): boolean;
    isRunning(): boolean;
    isQuantumBurstEnabled(): boolean;
    toggle(enabled?: boolean): Promise<void>;
    updateOptions(options: Partial<ITarsOptions>): void;
    activateManualMode(modeInstance: ITarsMode): Promise<void>;
    getStatus(): Translation | string;
    updateStatus(): void;
    ensureSailingMode(sailingMode: boolean): Promise<void>;
    private ensureSaveData;
    private ensureNavigation;
    private getOrCreateModeInstance;
    private initializeMode;
    private disposeMode;
    private reset;
    private clearCaches;
    private delete;
    private disable;
    private interrupt;
    private fullInterrupt;
    private tick;
    private onTick;
    private getInterrupts;
    private getRecoverInterrupts;
    private optionsInterrupt;
    private equipmentInterrupt;
    private equipInterrupt;
    private handsEquipInterrupt;
    private handEquipInterrupt;
    private repairsInterrupt;
    private repairInterrupt;
    private nearbyCreatureInterrupt;
    private checkNearbyCreature;
    private buildItemObjectives;
    private gatherFromCorpsesInterrupt;
    private reduceWeightInterrupt;
    private returnToBaseInterrupt;
    private escapeCavesInterrupt;
    private organizeInventoryInterrupts;
    private processQueuedNavigationUpdates;
    private processQuantumBurst;
}
