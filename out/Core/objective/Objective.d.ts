import type Creature from "game/entity/creature/Creature";
import type { ILog } from "utilities/Log";
import type Context from "../context/Context";
import { ReserveType } from "../ITars";
import type { IObjective, ObjectiveExecutionResult } from "./IObjective";
import type Item from "game/item/Item";
export default abstract class Objective implements IObjective {
    private static uuid;
    enableLogging: boolean;
    protected contextDataKey: string;
    protected _shouldKeepInInventory: boolean | undefined;
    protected reserveType: ReserveType | undefined;
    private _log;
    private _uniqueIdentifier;
    private _additionalDifficulty;
    private _overrideDifficulty;
    private _status;
    abstract getIdentifier(): string;
    abstract getStatus(context: Context): string | undefined;
    abstract execute(context: Context): Promise<ObjectiveExecutionResult>;
    get log(): ILog;
    setLogger(log: ILog | undefined): void;
    getHashCode(addUniqueIdentifier?: boolean): string;
    toString(): string;
    getName(): string;
    getStatusMessage(context: Context): string | undefined;
    setStatus(status: IObjective | (() => string) | string): this;
    canSaveChildObjectives(): boolean;
    canGroupTogether(): boolean;
    isDynamic(): boolean;
    canIncludeContextHashCode(context: Context): boolean;
    shouldIncludeContextHashCode(context: Context): boolean;
    addDifficulty(difficulty: number): this;
    overrideDifficulty(difficulty: number | undefined): this;
    isDifficultyOverridden(): boolean;
    getDifficulty(context: Context): number;
    onMove(context: Context, ignoreCreature?: Creature): Promise<IObjective | boolean>;
    setContextDataKey(contextDataKey: string): this;
    shouldKeepInInventory(): boolean;
    keepInInventory(): this;
    setReserveType(reserveType: ReserveType | undefined): this;
    passAcquireData(objective: Objective, reserveType?: ReserveType): this;
    protected getAcquiredItem(context: Context): Item | undefined;
    protected getBaseDifficulty(_context: Context): number;
    protected addUniqueIdentifier(): void;
}
