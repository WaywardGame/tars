import EventEmitter from "event/EventEmitter";
import type { IActionApi } from "game/entity/action/IAction";
import { ActionType } from "game/entity/action/IAction";
import type { IStat } from "game/entity/IStats";
import type { INote } from "game/entity/player/note/NoteManager";
import type Player from "game/entity/player/Player";
import { TileUpdateType } from "game/IGame";
import type Island from "game/island/Island";
import type Item from "game/item/Item";
import type { IPromptDescriptionBase } from "game/meta/prompt/IPrompt";
import type { IPrompt } from "game/meta/prompt/Prompts";
import type Prompts from "game/meta/prompt/Prompts";
import type { ITile } from "game/tile/ITerrain";
import InterruptChoice from "language/dictionary/InterruptChoice";
import type { ISaveData } from "../ITarsMod";
import { TarsTranslation } from "../ITarsMod";
import Context from "./context/Context";
import { ITarsEvents, ITarsOptions } from "./ITars";
import type { ITarsMode } from "./mode/IMode";
import { TarsOverlay } from "../ui/TarsOverlay";
import Human from "game/entity/Human";
import NPC from "game/entity/npc/NPC";
import ItemManager from "game/item/ItemManager";
import CorpseManager from "game/entity/creature/corpse/CorpseManager";
import Corpse from "game/entity/creature/corpse/Corpse";
export default class Tars extends EventEmitter.Host<ITarsEvents> {
    private readonly human;
    private readonly saveData;
    private readonly overlay;
    private base;
    private inventory;
    private readonly utilities;
    private readonly statThresholdExceeded;
    private quantumBurstCooldown;
    private weightStatus;
    private previousWeightStatus;
    private lastStatusMessage;
    private context;
    private objectivePipeline;
    private interruptObjectivePipeline;
    private interruptContext;
    private readonly interruptContexts;
    private interruptIds;
    private tickTimeoutId;
    private navigationSystemState;
    private navigationUpdatePromise;
    private readonly navigationQueuedUpdates;
    private readonly modeCache;
    private loaded;
    constructor(human: Human, saveData: ISaveData, overlay: TarsOverlay);
    private delete;
    load(): void;
    unload(): void;
    disable(gameIsTravelingOrEnding?: boolean): void;
    onPlayerSpawn(player: Player): void;
    onWriteNote(player: Player, note: INote): false | void;
    onPlayerDeath(): void;
    onPlayerRespawn(): void;
    processMovement(player: Player): Promise<void>;
    onItemRemove(_: ItemManager, item: Item): void;
    onCorpseRemove(_: CorpseManager, corpse: Corpse): void;
    onRestEnd(player: Player): void;
    onPostMove(npc: NPC, fromX: number, fromY: number, fromZ: number, fromTile: ITile, toX: number, toY: number, toZ: number, toTile: ITile): Promise<void>;
    onMoveComplete(player: Player): void;
    onPrompt(host: Prompts.Events, prompt: IPrompt<IPromptDescriptionBase<any[]>>): string | boolean | void | InterruptChoice | undefined;
    onTileUpdate(island: Island, tile: ITile, tileX: number, tileY: number, tileZ: number, tileUpdateType: TileUpdateType): void;
    postExecuteAction(_: any, actionType: ActionType, api: IActionApi, args: any[]): void;
    processInput(player: Player): boolean | undefined;
    onWalkPathChange(human: Human, walkPath: IVector2[] | undefined): void;
    preMove(human: Human, prevX: number, prevY: number, prevZ: number, prevTile: ITile, nextX: number, nextY: number, nextZ: number, nextTile: ITile): void;
    onStatChange(human: Human, stat: IStat): void;
    onMoveToIsland(): Promise<void>;
    getContext(): Context;
    isEnabled(): boolean;
    isRunning(): boolean;
    isQuantumBurstEnabled(): boolean;
    toggle(enabled?: boolean): Promise<void>;
    updateOptions(options: Partial<ITarsOptions>): void;
    activateManualMode(modeInstance: ITarsMode): Promise<void>;
    getStatus(): TarsTranslation | string;
    updateStatus(): void;
    ensureSailingMode(sailingMode: boolean): Promise<void>;
    private ensureNavigation;
    private getOrCreateModeInstance;
    private initializeMode;
    private disposeMode;
    private reset;
    private clearCaches;
    private getCurrentObjective;
    private interrupt;
    private fullInterrupt;
    private tick;
    private onTick;
    private getInterrupts;
    private getRecoverInterrupts;
    private optionsInterrupt;
    private equipmentInterrupt;
    private equipInterrupt;
    private handsEquipInterrupt;
    private changeEquipmentOption;
    private handEquipInterrupt;
    private repairsInterrupt;
    private repairInterrupt;
    private nearbyCreatureInterrupt;
    private checkNearbyCreature;
    private buildItemObjectives;
    private gatherFromCorpsesInterrupt;
    private reduceWeightInterrupt;
    private returnToBaseInterrupt;
    private escapeCavesInterrupt;
    private organizeInventoryInterrupts;
    private processQueuedNavigationUpdates;
    private processQuantumBurst;
}
