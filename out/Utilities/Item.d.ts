import type { DoodadType, DoodadTypeGroup } from "game/doodad/IDoodad";
import { ActionType } from "game/entity/action/IAction";
import type Creature from "game/entity/creature/Creature";
import { DamageType } from "game/entity/IEntity";
import { EquipType } from "game/entity/IHuman";
import type { IContainer, IRecipe } from "game/item/IItem";
import { ItemType, ItemTypeGroup } from "game/item/IItem";
import type Item from "game/item/Item";
import ItemRecipeRequirementChecker from "game/item/ItemRecipeRequirementChecker";
import type Doodad from "game/doodad/Doodad";
import type { TerrainType } from "game/tile/ITerrain";
import type Context from "../core/context/Context";
import { IDisassemblySearch } from "../core/ITars";
export declare class ItemUtilities {
    private static readonly relatedItemsCache;
    private static readonly relatedItemsByGroupCache;
    private static readonly dismantleSearchCache;
    foodItemTypes: Set<ItemType>;
    seedItemTypes: Set<ItemType>;
    private availableInventoryWeightCache;
    private itemCache;
    private readonly disassembleSearchCache;
    static getRelatedItemTypes(itemType: ItemType): Set<ItemType> | boolean;
    static getRelatedItemTypesByGroup(itemTypeGroup: ItemTypeGroup): Set<ItemType> | boolean;
    static getDismantleSearch(itemType: ItemType): Set<ItemType>;
    initialize(context: Context): void;
    clearCache(): void;
    getBaseItems(context: Context): Item[];
    getBaseItemsByType(context: Context, itemType: ItemType): Item[];
    getDisassembleSearch(context: Context, itemType: ItemType): IDisassemblySearch[];
    isAllowedToUseItem(context: Context, item: Item, allowProtectedInventoryItems?: boolean): boolean;
    processRecipe(context: Context, recipe: IRecipe, useIntermediateChest: boolean, allowInventoryItems?: boolean): ItemRecipeRequirementChecker;
    getItemsInContainer(context: Context, container: IContainer): Item[];
    getItemsInContainerByType(context: Context, container: IContainer, itemType: ItemType): Item[];
    getItemsInContainerByGroup(context: Context, container: IContainer, itemTypeGroup: ItemTypeGroup): Item[];
    getItemsInInventory(context: Context): Item[];
    getItemInInventory(context: Context, itemTypeSearch: ItemType, allowInventoryItems?: boolean): Item | undefined;
    getItemInContainer(context: Context, container: IContainer, itemTypeSearch: ItemType, allowInventoryItems?: boolean): Item | undefined;
    getItemInContainerByGroup(context: Context, container: IContainer, itemTypeGroup: ItemTypeGroup, allowInventoryItems?: boolean): Item | undefined;
    isInventoryItem(context: Context, item: Item): boolean;
    isSafeToDrinkItem(item: Item): boolean;
    isDrinkableItem(item: Item): boolean;
    canGatherWater(item: Item): boolean;
    hasUseActionType(item: Item, actionType: ActionType): boolean;
    getTools(context: Context, actionType: ActionType, preferredDamageType?: DamageType): Item[];
    getBestTool(context: Context, use: ActionType, preferredDamageType?: DamageType): Item | undefined;
    getBestToolForDoodadGather(context: Context, doodad: Doodad): Item | undefined;
    getBestToolForTerrainGather(context: Context, terrainType: TerrainType): Item | undefined;
    getBestEquipment(context: Context, equip: EquipType): Item[];
    calculateEquipItemScore(item: Item): number;
    estimateDamageModifier(weapon: Item, target: Creature): number;
    getPossibleHandEquips(context: Context, actionType: ActionType, preferredDamageType?: DamageType, filterEquipped?: boolean): Item[];
    getInventoryItemsWithEquipType(context: Context, equipType: EquipType): Item[];
    hasInventoryItemForAction(context: Context, actionType: ActionType): boolean;
    getInventoryItemsWithUse(context: Context, use: ActionType, filterEquipped?: boolean): Item[];
    getReservedItems(context: Context, includeKeepInInventoryItems: boolean): Item[];
    getUnusedItems(context: Context, options?: Partial<{
        allowReservedItems: boolean;
        allowSailboat: boolean;
    }>): Item[];
    getAvailableInventoryWeight(context: Context): number;
    getSeeds(context: Context): Item[];
    getInventoryItemForDoodad(context: Context, doodadTypeOrGroup: DoodadType | DoodadTypeGroup): Item | undefined;
    private getFoodItemTypes;
    private getSeedItemTypes;
    private isHealthyToEat;
}
