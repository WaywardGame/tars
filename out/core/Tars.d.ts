/*!
 * Copyright 2011-2023 Unlok
 * https://www.unlok.ca
 *
 * Credits & Thanks:
 * https://www.unlok.ca/credits-thanks/
 *
 * Wayward is a copyrighted and licensed work. Modification and/or distribution of any source files is prohibited. If you wish to modify the game in any way, please refer to the modding guide:
 * https://github.com/WaywardGame/types/wiki
 */
import EventEmitter from "@wayward/utilities/event/EventEmitter";
import type { IActionApi } from "@wayward/game/game/entity/action/IAction";
import { ActionType } from "@wayward/game/game/entity/action/IAction";
import Corpse from "@wayward/game/game/entity/creature/corpse/Corpse";
import CorpseManager from "@wayward/game/game/entity/creature/corpse/CorpseManager";
import type Creature from "@wayward/game/game/entity/creature/Creature";
import CreatureManager from "@wayward/game/game/entity/creature/CreatureManager";
import Human from "@wayward/game/game/entity/Human";
import { AttackType } from "@wayward/game/game/entity/IEntity";
import { WalkPathChangeReason } from "@wayward/game/game/entity/IHuman";
import type { IStat } from "@wayward/game/game/entity/IStats";
import NPC from "@wayward/game/game/entity/npc/NPC";
import ControllableNPC from "@wayward/game/game/entity/npc/npcs/Controllable";
import type { INote } from "@wayward/game/game/entity/player/note/NoteManager";
import type Player from "@wayward/game/game/entity/player/Player";
import { TileUpdateType } from "@wayward/game/game/IGame";
import type Island from "@wayward/game/game/island/Island";
import Item from "@wayward/game/game/item/Item";
import ItemManager from "@wayward/game/game/item/ItemManager";
import type { IPromptDescriptionBase } from "@wayward/game/game/meta/prompt/IPrompt";
import type Prompts from "@wayward/game/game/meta/prompt/Prompts";
import type { IPrompt } from "@wayward/game/game/meta/prompt/Prompts";
import { WorldZ } from "@wayward/utilities/game/WorldZ";
import InterruptChoice from "@wayward/game/language/dictionary/InterruptChoice";
import Translation from "@wayward/game/language/Translation";
import { IVector2 } from "@wayward/game/utilities/math/IVector";
import Tile from "@wayward/game/game/tile/Tile";
import { ISaveData, ISaveDataContainer } from "../ITarsMod";
import { TarsOverlay } from "../ui/TarsOverlay";
import Context from "./context/Context";
import { ITarsEvents } from "./ITars";
import { ITarsOptions } from "./ITarsOptions";
import type { ITarsMode } from "./mode/IMode";
import { NavigationKdTrees } from "./navigation/NavigationKdTrees";
import TranslationImpl from "@wayward/game/language/impl/TranslationImpl";
export type TarsNPC = ControllableNPC<ISaveData> & {
    tarsInstance?: Tars;
};
export default class Tars extends EventEmitter.Host<ITarsEvents> {
    readonly human: Human;
    readonly saveData: ISaveData;
    private readonly overlay;
    readonly dialogSubId: string;
    private readonly log;
    private readonly planner;
    private readonly executor;
    private base;
    private inventory;
    private readonly utilities;
    private readonly statThresholdExceeded;
    private quantumBurstCooldown;
    private weightStatus;
    private previousWeightStatus;
    private lastStatusMessage;
    private context;
    private objectivePipeline;
    private interruptObjectivePipeline;
    private interruptContext;
    private readonly interruptContexts;
    private interruptIds;
    private tickTimeoutId;
    private navigationSystemState;
    private navigationUpdatePromise;
    private readonly navigationQueuedUpdates;
    private readonly modeCache;
    private loaded;
    constructor(human: Human, saveData: ISaveData, overlay: TarsOverlay, navigationKdTrees: NavigationKdTrees);
    private delete;
    getName(): TranslationImpl;
    getSaveDataContainer(): ISaveDataContainer;
    loadSaveData(container: ISaveDataContainer): void;
    load(): void;
    unload(): void;
    disable(gameIsTravelingOrEnding?: boolean): void;
    onPlayerSpawn(player: Player): void;
    onWriteNote(player: Player, note: INote): false | void;
    onPlayerDeath(): void;
    onPlayerRespawn(): void;
    onItemRemove(_: ItemManager, item: Item): void;
    onCreatureRemove(_: CreatureManager, creature: Creature): void;
    onCorpseRemove(_: CorpseManager, corpse: Corpse): void;
    onRestEnd(human: Human): void;
    onCreaturePostMove(creature: Creature, fromTile: Tile, toTile: Tile): Promise<void>;
    onNpcRenamed(npc: NPC): void;
    onHumanPostMove(human: Human, fromTile: Tile, toTile: Tile): Promise<void>;
    onCanChangeWalkPath(human: Human, path: IVector2[] | undefined, reason: WalkPathChangeReason): false | undefined;
    onMoveComplete(human: Human): void;
    onPrompt(host: Prompts.Events, prompt: IPrompt<IPromptDescriptionBase<any[]>>): string | boolean | void | InterruptChoice | undefined;
    onTileUpdate(island: Island, tile: Tile, tileUpdateType: TileUpdateType): void;
    postExecuteAction(_: any, actionType: ActionType, api: IActionApi, args: any[]): void;
    processInput(human: Human): false | undefined;
    onChangeZ(human: Human, z: WorldZ, lastZ: WorldZ): void;
    onPreMove(human: Human, prevTile: Tile, nextTile: Tile): void;
    onCanAttack(human: Human, weapon: Item | undefined, attackType: AttackType): boolean | undefined;
    onStatChange(human: Human, stat: IStat): void;
    onStatMaxChanged(human: Human, stat: IStat, oldValue: number | undefined): void;
    private onWeightChange;
    onMoveToIsland(human: Human): Promise<void>;
    getContext(): Context;
    get asNPC(): TarsNPC | undefined;
    isEnabled(): boolean;
    isRunning(): boolean;
    isQuantumBurstEnabled(): boolean;
    canToggle(): boolean;
    toggle(enabled?: boolean): Promise<void>;
    updateOptions(options: Partial<ITarsOptions>): void;
    updateWalkPath(path: IVector2[]): void;
    activateManualMode(modeInstance: ITarsMode): Promise<void>;
    getStatus(): Translation | string;
    updateStatus(): void;
    ensureSailingMode(sailingMode: boolean): Promise<void>;
    private ensureNavigation;
    private getOrCreateModeInstance;
    private initializeMode;
    private disposeMode;
    private reset;
    private createContext;
    private clearCaches;
    private getCurrentObjective;
    private interrupt;
    private fullInterrupt;
    private tick;
    private onTick;
    private getInterrupts;
    private getRecoverInterrupts;
    private optionsInterrupt;
    private equipmentInterrupt;
    private equipInterrupt;
    private repairsInterrupt;
    private repairInterrupt;
    private nearbyCreatureInterrupt;
    private checkNearbyCreature;
    private buildItemObjectives;
    private gatherFromCorpsesInterrupt;
    private reduceWeightInterrupt;
    private returnToBaseInterrupt;
    private escapeCavesInterrupt;
    private organizeInventoryInterrupts;
    private organizeBackpackInterrupts;
    private processQueuedNavigationUpdates;
    private processQuantumBurst;
    private getDialogSubId;
}
